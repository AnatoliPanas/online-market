"""
Django settings for project_config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from environ import Env
from datetime import timedelta

env = Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 3-rd party
    'django_filters',
    'rest_framework',
    'rest_framework_simplejwt',

    # local
    'store.apps.StoreConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project_config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if env.bool("USE_REMOTE_DB"):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': env('DB_NAME'),
            'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'),
            'HOST': env('DB_HOST'),
            'PORT': env('DB_PORT'),
        },
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],

}







# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=10),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_TOKEN_CLASSES': [
        'rest_framework_simplejwt.tokens.AccessToken',
    ],

}

LOG_LEVEL = 'DEBUG' if DEBUG else 'INFO'      # ← переключаем через DEBUG

LOGGING = {
    'version': 1,                             # обязательная «версия» формата dictConfig
    'disable_existing_loggers': False,        # не гасим встроенные логгеры Django

    'formatters': {                           # блок описания форматов вывода
        'verbose': {                          # человекочитаемый формат «verbose»
            'format': '[{asctime}] {levelname} {name}:{lineno} | {message}',  # шаблон строки
            'style': '{',                     # используем f-строчный стиль с фигурными скобками
            'datefmt': '%Y-%m-%d %H:%M:%S',   # формат даты/времени
        },
    },

    'handlers': {                             # куда писать логи
        'console': {                          # вывод в stdout
            'class': 'logging.StreamHandler', # стандартный потоковый хэндлер
            'level': LOG_LEVEL,               # уровень из LOG_LEVEL
            'formatter': 'verbose',           # применяем formatter 'verbose'
        },
        'file': {                             # запись в файл с ротацией
            'class': 'logging.handlers.RotatingFileHandler',  # встроенный ротационный хэндлер
            'level': LOG_LEVEL,               # тот же уровень
            'formatter': 'verbose',           # тот же формат
            'filename': str(BASE_DIR / 'db_queries.log'),     # путь к файлу логов
            'maxBytes': 10_000_000,           # максимум 10 МБ на файл
            'backupCount': 5,                 # храним 5 архивных копий
            'encoding': 'utf-8',              # явная кодировка файла
        },
    },

    'loggers': {                              # сами логгеры (по именам)
        'django.db.backends': {               # логгер SQL-запросов ORM
            'handlers': ['console', 'file'],  # пишем и в консоль, и в файл
            'level': LOG_LEVEL,               # уровень тот же
            'propagate': False,               # не пересылать сообщения «выше» к root-логгеру
        },
    },
}


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
